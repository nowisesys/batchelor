<?php

namespace Batchelor\Queue\Task\Execute;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-09-20 at 12:06:15.
 */
class WorkerTest extends \PHPUnit_Framework_TestCase
{

        /**
         * @var Worker
         */
        protected $object;
        protected $select;

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                $this->object = new Worker(new class extends Runnable implements Selectable {

                            public function getCommand(): string
                            {
                                    return "ls -l /tmp";
                            }
                    }
                );

                $this->select = $this->object->getSelectable();
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                
        }

        /**
         * @covers Batchelor\Queue\Task\Execute\Worker::getSelectable
         */
        public function testGetSelectable()
        {
                $expect = $this->select;
                $actual = $this->object->getSelectable();

                $this->assertNotNull($actual);
                $this->assertTrue(is_object($actual));
                $this->assertEquals($expect, $actual);
                $this->assertSame($expect, $actual);
        }

        /**
         * @covers Batchelor\Queue\Task\Execute\Worker::getStreams
         */
        public function testGetStreams()
        {
                $this->object->open();
                $actual = $this->object->getStreams();

                $this->assertNotNull($actual);
                $this->assertTrue(is_array($actual));
                $this->assertTrue(count($actual) == 3);

                $this->assertTrue(is_resource($actual[0]));
                $this->assertTrue(is_resource($actual[1]));
                $this->assertTrue(is_resource($actual[2]));

                $this->assertTrue(get_resource_type($actual[0]) == "stream");
                $this->assertTrue(get_resource_type($actual[1]) == "stream");
                $this->assertTrue(get_resource_type($actual[2]) == "stream");
        }

        /**
         * @covers Batchelor\Queue\Task\Execute\Worker::getStream
         */
        public function testGetStream()
        {
                $this->object->open(true);
                $actual = $this->object->getStream(1);

                $this->assertNotNull($actual);
                $this->assertTrue(is_resource($actual));
        }

        /**
         * @covers Batchelor\Queue\Task\Execute\Worker::isOpened
         */
        public function testIsOpened()
        {
                $expect = false;
                $actual = $this->object->isOpened();

                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($expect, $actual);

                $this->object->open();

                $expect = true;
                $actual = $this->object->isOpened();

                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($expect, $actual);

                $this->object->close();

                $expect = false;
                $actual = $this->object->isOpened();

                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($expect, $actual);
        }

        public function testRead()
        {
                $this->object->open();

                $stream = $this->object->getStream(1);

                while (($buff = fgets($stream))) {
                        printf("%s\n", trim($buff));
                }
        }

}
