<?php

namespace Batchelor\Queue\Task\Scheduler\Rotate;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-11-26 at 12:07:29.
 */
class ServiceTest extends \PHPUnit_Framework_TestCase
{

        /**
         * @var Service
         */
        protected $object;

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                $this->object = new Service;
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                
        }

        /**
         * @covers Batchelor\Queue\Task\Scheduler\Rotate\Service::getLimit
         */
        public function testGetLimit()
        {
                $expect = 50;
                $actual = $this->object->getLimit('finished');

                $this->assertNotNull($actual);
                $this->assertEquals($actual, $expect);

                $expect = -1;
                $actual = $this->object->getLimit('missing');

                $this->assertNotNull($actual);
                $this->assertEquals($actual, $expect);
        }

        /**
         * @covers Batchelor\Queue\Task\Scheduler\Rotate\Service::getSpare
         */
        public function testGetSpare()
        {
                $expect = 5;
                $actual = $this->object->getSpare('finished');

                $this->assertNotNull($actual);
                $this->assertEquals($actual, $expect);

                $expect = 0;
                $actual = $this->object->getSpare('missing');

                $this->assertNotNull($actual);
                $this->assertEquals($actual, $expect);
        }

        /**
         * @covers Batchelor\Queue\Task\Scheduler\Rotate\Service::hasConfig
         */
        public function testHasConfig()
        {
                $expect = true;
                $actual = $this->object->hasConfig('finished');

                $this->assertNotNull($actual);
                $this->assertEquals($actual, $expect);

                $expect = false;
                $actual = $this->object->hasConfig('missing');

                $this->assertNotNull($actual);
                $this->assertEquals($actual, $expect);
        }

        /**
         * @covers Batchelor\Queue\Task\Scheduler\Rotate\Service::needRotation
         */
        public function testNeedRotation()
        {
                $queue1 = array_fill(0, 25, 1);
                $expect = false;
                $actual = $this->object->needRotation('finished', count($queue1));

                $this->assertNotNull($actual);
                $this->assertEquals($actual, $expect);

                $queue1 = array_fill(0, 50, 1);
                $expect = false;
                $actual = $this->object->needRotation('finished', count($queue1));

                $this->assertNotNull($actual);
                $this->assertEquals($actual, $expect);

                $queue1 = array_fill(0, 51, 1);
                $expect = true;
                $actual = $this->object->needRotation('finished', count($queue1));

                $this->assertNotNull($actual);
                $this->assertEquals($actual, $expect);

                $queue1 = array_fill(0, 100, 1);
                $expect = false;
                $actual = $this->object->needRotation('missing', count($queue1));

                $this->assertNotNull($actual);
                $this->assertEquals($actual, $expect);
        }

        /**
         * @covers Batchelor\Queue\Task\Scheduler\Rotate\Service::getRotated
         */
        public function testGetRotated()
        {
                $expect = array_fill(0, 25, 1);
                $actual = $this->object->getRotated('finished', $expect);

                $this->assertNotNull($actual);
                $this->assertEquals($actual, $expect);

                $expect = array_fill(0, 50, 1);
                $actual = $this->object->getRotated('finished', $expect);

                $this->assertNotNull($actual);
                $this->assertEquals($actual, $expect);

                $expect = array_fill(0, 51, 1);
                $actual = $this->object->getRotated('finished', $expect);

                $this->assertNotNull($actual);
                $this->assertNotEquals($actual, $expect);
                $this->assertTrue(count($actual) == 45, count($actual));

                $expect = array_fill(0, 100, 1);
                $actual = $this->object->getRotated('missing', $expect);

                $this->assertNotNull($actual);
                $this->assertEquals($actual, $expect);
        }

}
