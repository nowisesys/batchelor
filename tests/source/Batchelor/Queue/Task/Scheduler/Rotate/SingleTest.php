<?php

namespace Batchelor\Queue\Task\Scheduler\Rotate;

// 
// Use default rotate config for running this test.
// 

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-11-26 at 11:06:04.
 */
class SingleTest extends \PHPUnit_Framework_TestCase
{

        /**
         * @var Single
         */
        protected $object;

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                $this->object = new Single('finished');
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                
        }

        /**
         * @covers Batchelor\Queue\Task\Scheduler\Rotate\Single::getLimit
         */
        public function testGetLimit()
        {
                $expect = 50;
                $actual = $this->object->getLimit();

                $this->assertNotNull($actual);
                $this->assertEquals($actual, $expect);
        }

        /**
         * @covers Batchelor\Queue\Task\Scheduler\Rotate\Single::getSpare
         */
        public function testGetSpare()
        {
                $expect = 5;
                $actual = $this->object->getSpare();

                $this->assertNotNull($actual);
                $this->assertEquals($actual, $expect);
        }

        /**
         * @covers Batchelor\Queue\Task\Scheduler\Rotate\Single::hasConfig
         */
        public function testHasConfig()
        {
                $expect = true;
                $actual = $this->object->hasConfig();

                $this->assertNotNull($actual);
                $this->assertEquals($actual, $expect);
        }

        /**
         * @covers Batchelor\Queue\Task\Scheduler\Rotate\Single::needRotation
         */
        public function testNeedRotation()
        {
                $queue1 = array_fill(0, 25, 1);
                $expect = false;
                $actual = $this->object->needRotation(count($queue1));

                $this->assertNotNull($actual);
                $this->assertEquals($actual, $expect);

                $queue1 = array_fill(0, 50, 1);
                $expect = false;
                $actual = $this->object->needRotation(count($queue1));

                $this->assertNotNull($actual);
                $this->assertEquals($actual, $expect);

                $queue1 = array_fill(0, 51, 1);
                $expect = true;
                $actual = $this->object->needRotation(count($queue1));

                $this->assertNotNull($actual);
                $this->assertEquals($actual, $expect);
        }

        /**
         * @covers Batchelor\Queue\Task\Scheduler\Rotate\Single::getRotated
         */
        public function testGetRotated()
        {
                $expect = array_fill(0, 25, 1);
                $actual = $this->object->getRotated($expect);

                $this->assertNotNull($actual);
                $this->assertEquals($actual, $expect);

                $expect = array_fill(0, 50, 1);
                $actual = $this->object->getRotated($expect);

                $this->assertNotNull($actual);
                $this->assertEquals($actual, $expect);

                $expect = array_fill(0, 51, 1);
                $actual = $this->object->getRotated($expect);

                $this->assertNotNull($actual);
                $this->assertNotEquals($actual, $expect);
                $this->assertTrue(count($actual) == 45, count($actual));
        }

}
