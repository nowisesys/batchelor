
    ** System cache **


Cache is configured in config/defaults.app. By default the cache is using 
files, but can be configured with i.e. apcu.

** Single type cache:

    The config entry is on this form, were the options array are passed as is to 
    cache constructor for type xxx:

        'cache' => [
            'type'    => 'xxx',
            'options' => [ ... ]
        ]

    Valid options for type are: 

        o) file      - Use file system.
        o) memory    - Use RAM memory.
        o) shmop     - Use shared memory.
        o) xcache    - Use the xcache extension.
        o) apcu      - Use the APCu extension.
        o) redis     - Use Redis server (single, cluster or array).
        o) memcached - Use memcached server.

    For options, see classes under Batchelor\Cache\Backend under source. 

    o) Examples:

        // 
        // Using APCu as cache backend:
        // 
        'cache' => [
            'type'    => 'apcu',
            'options' => [
                'prefix'    => 'batchelor',
                'lifetime'  => 7200
            ]
        ]

        // 
        // Using file system as cache backend:
        // 
        'cache' => [
            'type'    => 'file',
            'options' => [
                'path'     => 'cache', // Absolute or relative to the data directory.
                'format'   => 'php',
                'prefix'   => 'batchelor',
                'suffix'   => '.ser',
                'lifetime' => 604800
            ]
        ]

** Stacked cache:

    Theres also a special stacked cache that creates a priority queue of configured 
    cache classes using each lifetime options as the priority (reversed). When caching
    an entry with i.e. lifetime 3600 it is written to all backends.

    When reading entries, each cache object in the priority queue is checked top to
    bottom for an existing value. If found, it is then populated up in the queue to
    fill missing entries in cache objects with higher priority.

    The stacked backend is configured from the same place as single instance
    backend, but uses the backends array:

        'cache' => [
            'type'    => 'stacked',
            'options' => [
                'prefix'    => 'batchelor',
                'lifetime'  => 7200,
                'backends' => [
                    'file' => [ ... ],      // Options for file backend.
                    'apcu' => [ ... ],      // Options for APCu backend.
                ]
            ]
        ]

    The priority between backends is automatic, with backends with lowest lifetime
    first in the pipeline. Two shortcut modes are also possible if options are not
    required for backends:

        'cache' => [
            'type'    => 'stacked',
            'options' => [
                'backends' => [
                    'file' => true,
                    'apcu' => true
                ]
            ]
        ]

    Use simple array containing the backend names:

        'cache' => [
            'type'    => 'stacked',
            'options' => [
                'backends' => [
                    'file', 'apcu'
                ]
            ]
        ]

** Detect cache backend:

    It's also possible to use cache backend detection. In this mode, the first
    available cache backend will be used. The probing is done by putting backends
    with high performance first in list.

        'cache' => [
            'type'    => 'detect'
        ]

    To exclude backends from being considered as candidates, pass an array of 
    backend names to exclude:

        'cache' => [
            'type'    => 'detect',
            'options' => [
                'exclude' => [ 'file' ]
            ]
        ]

** Lifetime:

    The lifetime option defines the number of seconds before an cache entry is 
    expired. It's defaines the default lifetime that is used unless a lifetime is
    explicit passed on save().

    Cache entries with lifetime 0 is considered to be permanent and will never
    expires. The memory backend is an exception to this because its cache entries
    are all expired when the script terminates.

** Recommendations:

    The stacked cache is suitable for implementing an "eventual in sync" cache. For
    most installations its sufficient with i.e. using redis. If running on a single
    server, use apcu or redis as backend.

** Service:

    The configured cache is available as a service named cache. It's injected as a
    property into classes deriving from the component class.

// Anders LÃ¶vgren, 2018-09-01
