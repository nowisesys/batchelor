<?php

// -------------------------------------------------------------------------------
//  Copyright (C) 2007 Anders Lövgren
//
//  This program is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
// -------------------------------------------------------------------------------

// 
// The timezone can either be set system wide (in php.ini) or application
// local (here in config.inc). Setting the timezone is recommended as it
// affects how date() and strftime() formats timestamps (UNIX timestamp).
// 
if(!ini_get("date.timezone")) {
    // ini_set("date.timezone", "CET");
}

// 
// The contact address for problems running batchelor. This address is used
// in some error messages and is also printed in page footer. You should set
// it to a real address!
//
define ("CONTACT_NAME", "System Manager");
define ("CONTACT_ADDRESS", "batchelor@localhost");
define ("CONTACT_STRING", sprintf("<a href=\"mailto:%s\">%s</a>", 
				  CONTACT_ADDRESS, CONTACT_NAME));

// 
// This command lists number of running jobs from all users.
// 
define ("BATCH_RUNNING", "at -l | grep '=' | wc -l");

// 
// The maximum number of jobs thats allowed to run simultanous. The number
// to use must be determined by experimenting. A good starting point might be
// to allow 2 * N(c) - 1, where N(c) == number of CPU cores. 
// 
// Use 0 to force all jobs to be queued using the BATCH_COMMAND command.
// 
define ("BATCH_LIMIT", 3);

// 
// The batch cammand to run. The %s gets substituted with the batch job
// command, including its arguments. The command BATCH_COMMAND should queue
// the job and the BATCH_EXECUTE should start the job immidiatly. The
// BATCH_EXECUTE is used iff BATCH_RUNNING < BATCH_LIMIT, otherwise the job
// is queued for later execution.
// 
// Workaround for Solaris 8 (jobs in the batch queue is invisible?):
// 
// define ("BATCH_COMMAND", "echo \"%s\" | at -q a now + 0 minutes");
// define ("BATCH_EXECUTE", BATCH_COMMAND);
// 
define ("BATCH_COMMAND", "echo \"%s\" | batch");
define ("BATCH_EXECUTE", "echo \"%s\" | at now");

// 
// List all batch jobs. Jobs in queue 'b' is pending batch jobs and 
// jobs in queue '=' is currently running jobs.
// 
define ("BATCH_LISTING", "at -l");

// 
// Remove a pending job from the batch queue. The %d is substituted
// with the job ID to remove from queue.
// 
define ("BATCH_REMOVE", "atrm %d");

// 
// Define to 1 if jobs are removed from the batch queue listing when 
// they are started. Normally they remains until the job has finished.
// 
// define ("BATCH_START_DEQUEUES", 0);

// 
// 
// The minimum/maximum file size accepted (in bytes). Set to 0 to 
// disable minimum/maximum file size check. The maximum is affected
// by PHP's upload_max_filesize.
// 
define ("UPLOAD_MIN_FILESIZE", 5000);
define ("UPLOAD_MAX_FILESIZE", 0);

// 
// Should original name of uploaded file be preserved?
// 
define ("UPLOAD_PRESERVE_FILENAME", false);

// 
// Define the wrapping mode for the textarea. Possible values are:
//   "physical" - all visual line breaks are submitted as newlines
//   "logical"  - show visual line breaks but only submit"hardtyped".
//   "off"      - no visual linebreak, instead show scrollbars.
// 
define ("UPLOAD_TEXTAREA_WRAPPING", "off");

// 
// The maximum number of subjobs accepted from a single submit. Use this 
// in pre_enqueue_hook() to enforce a limit (defaults to 10).
// 
define ("UPLOAD_SUBJOB_LIMIT", 5);

// 
// The number of seconds between reload of the page waiting for
// running jobs to finish (in seconds). Set to 0 to disable automatic
// page refresh. Note that some browsers don't handle meta refresh
// correct, see http://en.wikipedia.org/wiki/Meta_refresh.
// 
define ("PAGE_REFRESH_RATE", 15);

// 
// Use session cookies or persistent cookies?
//
define ("USE_SESSION_COOKIES", false);

// 
// Cookie life time (not for session cookies).
// 
define ("COOKIE_LIFE_TIME", 3600 * 24 * 7);

// 
// Path to directory where job data gets saved. This directory must
// be read/write to the user the webserver is running as.
// 
define ("CACHE_DIRECTORY", realpath(dirname(__FILE__) . "/../cache"));
define ("CACHE_PERMISSION", 0750);

// 
// Should we save peer address <=> hostid associations to file?
// Useful for debbuging and for generating statistics.
// 
define ("SAVE_HOSTID_MAPPING", true);

// 
// Show delete job link.
// 
define ("SHOW_JOB_DELETE_LINK", true);

// 
// Format of UNIX timestamps, see manual page for date() function. 
// Localized output is enabled by setlocale() and using "%c" as
// format string.
// 
define ("TIMESTAMP_FORMAT", "%Y-%m-%d %H:%M:%S");

// 
// If PHP >= 5.2 and the PECL zip extension (http://pecl.php.net) is loaded,
// then we use it for creating zip-archives for download. If missing, then
// this command is used as fallback. 7-zip, licensed under GPL/BSD license,
// is free to use.
// 
// The first '%s' is zip-file to create, the second '%s' is the name of the
// directory to archive.
// 
// This example is for Info-ZIP (also free):
// define ("ZIP_FILE_COMMAND", "zip -r %s %s");
// 
// This example is for 7-Zip:
// 
define ("ZIP_FILE_COMMAND", "7z a %s %s -tzip");

// 
// Configures whether to present the job queue with icons or plain text 
// inside the table view.
// 
define ("USE_ICONIZED_QUEUE", true);

// 
// Configures whether to show job name in queue (see README), their max length 
// and how to truncate names of they exceed max length. The truncate option is 
// either "head", "middle" or "tail".
// 
define ("QUEUE_SHOW_NAMES", true);
define ("QUEUE_MAX_NAME_LENGHT", 65);
define ("QUEUE_TRUNCATE_NAME", "middle");

// 
// Display the queue in a more compact format.
// 
define ("QUEUE_FORMAT_COMPACT", false);

// 
// Define queue sort order (value are either "asc" or "desc").
// 
define ("QUEUE_SORT_ORDER", "asc");

// 
// Configure the menu style. Use either "graphic", "text" or "compact".
// 
define ("MENU_STYLE", "graphic");

// 
// Configure the menu orientation. Use either "vertical" or "horizontal".
// 
define ("MENU_ORIENTATION", "vertical");

// 
// Use the JpGraph library for generating graphics from statistics? Enable
// this is recommended. JpGraph can be downloaded from http://www.aditus.nu/jpgraph/
// 
// Settings for JpGraph can be tuned inside the file conf/jpgraph.inc
// 
define ("USE_JPGRAPH_LIB", false);

// 
// Define how to expose the statistics module. Possible values are:
// * public => expose statistics for all.
// * hidden => hide link to statistics module.
// * locked => only trusted host can access statistics.
// 
define ("STATISTICS_EXPOSED", "public");

// 
// If STATISTICS_EXPOSED is locked, then set this to a colon (':') separated
// list of hosts that are allowed to access the statistics module.
// 
define ("STATISTICS_TRUSTED", "127.0.0.1");

// 
// Define footer info.
// 
define ("FOOTER_SHOW_NOTES", true);
define ("FOOTER_SHOW_COPYING", true);

// 
// Define the string used in the title for each page.
// 
define ("HTML_PAGE_TITLE", "Batchelor");

// 
// Enable job control thru queue viewer. This option affects the possibility 
// to control running jobs (already started by the batch queue).
// Possible values are: "off", "simple" or "advanced".
// 
define ("ENABLE_JOB_CONTROL", "off");

// 
// Define the pre-selected or default option for job control. This will be 
// the action performed on running job when using the "simple" job control. 
// Possible values: "kill", "term", "hup", "usr1", "usr2", "stop" or "cont".
// 
// Using "stop" or "cont" is pointless unless job control is "advanced".
// 
define ("JOB_CONTROL_ACTION", "term");

// 
// You must define the signal values used in $signals. Run 'kill -l' or use the 
// utility script utils/signals.php. These defines are for GNU/Linux.
// 
define ("SIGHUP", 1);
define ("SIGINT", 2);
define ("SIGQUIT", 3);
define ("SIGILL", 4);
define ("SIGTRAP", 5);
define ("SIGABRT", 6);
define ("SIGIOT", 6);
define ("SIGBUS", 7);
define ("SIGFPE", 8);
define ("SIGKILL", 9);
define ("SIGUSR1", 10);
define ("SIGSEGV", 11);
define ("SIGUSR2", 12);
define ("SIGPIPE", 13);
define ("SIGALRM", 14);
define ("SIGTERM", 15);
define ("SIGSTKFLT", 16);
define ("SIGCHLD", 17);
define ("SIGCONT", 18);
define ("SIGSTOP", 19);
define ("SIGTSTP", 20);
define ("SIGTTIN", 21);
define ("SIGTTOU", 22);
define ("SIGURG", 23);
define ("SIGXCPU", 24);
define ("SIGXFSZ", 25);
define ("SIGVTALRM", 26);
define ("SIGPROF", 27);
define ("SIGWINCH", 28);
define ("SIGIO", 29);
define ("SIGLOST", 29);
define ("SIGPWR", 30);
define ("SIGSYS", 31);
define ("SIGUNUSED", 31);
define ("SIGRTMIN", 32);
define ("SIGSTKSZ", 8192);

// 
// The array of accepted signals. The action defines optional actions to 
// perform after successful sending the signal to the process:
// 
//   none:  do nothing more than sending the signal.
//   flag:  create a file containing the signal sent.
//   clear: wipe out the job directory.
//   
$signals = array( 
		  "term" => array( "value" => SIGTERM, "desc" => "Terminate Process", "action" => "clear" ),
		  "stop" => array( "value" => SIGSTOP, "desc" => "Stop (Pause)", "action" => "flag" ),
		  "cont" => array( "value" => SIGCONT, "desc" => "Continue (Resume)", "action" => "flag" ),
		  "kill" => array( "value" => SIGKILL, "desc" => "Kill Process", "action" => "clear" ),
		  "hup"  => array( "value" => SIGHUP,  "desc" => "Signal Hangup", "action" => "flag" ),
		  "usr1" => array( "value" => SIGUSR1, "desc" => "User Defined #1", "action" => "none" ),
		  "usr2" => array( "value" => SIGUSR2, "desc" => "User Defined #2", "action" => "none" ),
		  );

// 
// Configure the help style. Use either "graphic" or "text".
// 
define ("HELP_STYLE", "graphic");

// 
// Define "verbosity" level for builtin help. Value is between 0 and 3 where
// 0 is completely silent.
// 
define ("HELP_LEVEL", 2);

// 
// Show description about icons used in queue viewer.
//
define ("HELP_ICON_INFO", true);

// 
// Define which web services interfaces that should be allowed. All other
// settings starting with WS_XXX is web service specific. If an setting only
// applies to a specific web service interface, then its prefixed like e.g.
// WS_HTTP_XXX.
// 
define ("WS_ENABLE_HTTP",   false);
define ("WS_ENABLE_XMLRPC", false);

// 
// Define the source for the hostid value. Possible values are "cookie",
// "param" or "auto". Using "auto" tells the script to use the same method 
// as source/queue.php (for web service only)
// 
define ("WS_HOSTID_SOURCE", "auto");
// 
// This allowes the above settings to be configured individual for each
// web service interface. These settings overrides WS_HOSTID_SOURCE.
// 
// define ("WS_HTTP_HOSTID_SOURCE", "auto");
// define ("WS_XMLRPC_HOSTID_SOURCE", "auto");

// 
// Define the base directory relative the job directory, i.e. "result/set1"
// 
define ("WS_BASE_DIRECTORY", null);

// 
// Send error body also if true (for debug). For XML-RPC the error message
// is always encoded in the message body.
// 
define ("WS_HTTP_SEND_ERROR_BODY", false);

// 
// Define to true is additional HTTP headers should be sent, like file size
// and MIME type (for the moment).
// 
define ("WS_HTTP_SEND_FILE_PROPS", true);

// 
// Default format of output from HTTP RCP methods. Possible values are "xml",
// "foa", "php" or "json". The "plain" (alias "human") and "html" are also
// valid, but they are intended only for debug and development and are not 
// be implemented by all methods.
// 
define ("WS_HTTP_OUTPUT_FORMAT", "foa");

// 
// Should file content sent by the fopen method be base64 encoded?
// 
// define ("WS_FOPEN_BASE64_ENCODE", false);
// define ("WS_HTTP_FOPEN_BASE64_ENCODE", false);
// define ("WS_XMLRPC_FOPEN_BASE64_ENCODE", false);

// 
// OK, done configuring? Great! Now just set configured to true and define 
// default start page. Start page is either one of "submit", "queue" or "stats".
// 
define ("BATCHELOR_CONFIGURED", false);
define ("BATCHELOR_START_PAGE", "submit");

?>
