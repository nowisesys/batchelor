
    ************************************
        README FOR WORK QUEUES
    ************************************


Work queues are configured in config/defaults.app and can be a mixture of local
and remote queues. The queue service is divided in two pieces (maper and queues),
each can be configured individual.

** LOCAL QUEUE:

    The minimal configuration is an empty array, boolean true or simple comment 
    the queue setting away:

        'queue'   => []     // Use local queue
        'queue'   => true   // Use local queue

    This will create a local only queue. For many applications this is all that
    is needed.

** MAPPER:

    The mapper component resolves hostid to remote queues. A local queue might 
    also be mapped, but when using remote queues its best to not define an local
    queue.

    The resolve data is saved to cache and you can use the mapper options to 
    control how cache data is stored:

        'cache'   => [
                'mapper' => [
                        'type'    => 'redis',
                        'options' => [
                                'lifetime' => 0
                        ]
                ],
               ...
        ]

    In this configuration we are using Redis as cache backend (hopefully setup
    in database mode to preserve data between restarts). The default mapper is
    using file cache as backend storing data under cache/queue inside the data
    directory.

** REMOTE:

    Use the queues option to configure remote queues. 

        'queue'   => [
               ...
                'host1' => [
                        'type'   => 'remote',
                        'url'    => 'http://server1.example.com/batchelor',
                        'weight' => 25
                ],
                'host2' => [
                        'type'   => 'remote',
                        'url'    => 'http://server1.example.com/batchelor',
                        'weight' => 40
                ],
               ...
        ]

    The weight is used to make one remote server more likely to be selected as
    the work queue. The URL is the top directory where batchelor is setup. The
    protocol used for communication is automatic selected.

** ROTATING:

    Rotation of queues can be configured to prevent them to grow infinite. This
    is particular useful for the finished queue containing all completed jobs, but
    can be configured for all queues.

    The general config is:

        'rotate'  => [
                'finished' => [
                        'limit' => 50,      // The maximum number of entries.
                        'spare' => 5        // The number of free slots.
                ]
        ]

    The oldest entries are removed. In the example above, the finished queue will
    contain 45 entries after rotated. The limit defaults to 50 and spare defaults
    to limit/2 if not set:

        'rotate'  => [
                'finished' => true          // Rotate with default values.
        ]

    The builtin queues are "pending", "running" and "finished". To set limit on
    user queues, use "@hostid" as key:

        'rotate'  => [
                'finished' => true          // Rotate with default values.
                '@hostid'  => [
                        'limit' => 100      // Max 100 user jobs per queue.
                ]
        ]

    Queues without rotations defined in the application config (config/defaults.app)
    are allowed to grow infinite. If the rotate config key is missing, no rotation
    at all is applied. 

    By default only the finished queue is rotated with 50 entries as limit and 
    making 5 spare slots on each rotation.
    

// Anders LÃ¶vgren, 2018-09-17
