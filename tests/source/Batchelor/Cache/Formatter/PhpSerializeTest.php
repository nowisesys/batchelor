<?php

namespace Batchelor\Cache\Formatter;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-09-01 at 17:29:55.
 */
class PhpSerializeTest extends \PHPUnit_Framework_TestCase
{

        /**
         * @var PhpSerialize
         */
        protected $object;

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                $this->object = new PhpSerialize;
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                
        }

        /**
         * @covers Batchelor\Cache\Formatter\Serialize::onRead
         */
        public function testOnRead()
        {
                $expect = "test1";
                $svalue = serialize($expect);
                $actual = $this->object->onRead($svalue);
                $this->assertNotNull($actual);
                $this->assertTrue(is_string($actual));
                $this->assertEquals($actual, $expect);

                $expect = false;
                $svalue = serialize($expect);
                $actual = $this->object->onRead($svalue);
                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($actual, $expect);

                $expect = ["k1" => "v1", "k2" => false];
                $svalue = serialize($expect);
                $actual = $this->object->onRead($svalue);
                $this->assertNotNull($actual);
                $this->assertTrue(is_array($actual));
                $this->assertEquals($actual, $expect);
        }

        /**
         * @covers Batchelor\Cache\Formatter\Serialize::onSave
         */
        public function testOnSave()
        {
                $svalue = "test1";
                $expect = serialize($svalue);
                $actual = $this->object->onSave($svalue);
                $this->assertNotNull($actual);
                $this->assertTrue(is_string($actual));
                $this->assertEquals($actual, $expect);

                $svalue = false;
                $expect = serialize($svalue);
                $actual = $this->object->onSave($svalue);
                $this->assertNotNull($actual);
                $this->assertTrue(is_string($actual));
                $this->assertEquals($actual, $expect);

                $svalue = ["k1" => "v1", "k2" => false];
                $expect = serialize($svalue);
                $actual = $this->object->onSave($svalue);
                $this->assertNotNull($actual);
                $this->assertTrue(is_string($actual));
                $this->assertEquals($actual, $expect);
        }

        /**
         * @covers Batchelor\Cache\Formatter\Serialize::setOptions
         */
        public function testSetOptions()
        {
                $options = ['read' => ['k1' => 'v2']];
                $this->object->setOptions($options);
        }

        /**
         * @covers Batchelor\Cache\Formatter\Serialize::getOptions
         */
        public function testGetOptions()
        {
                $expect = [];
                $actual = $this->object->getOptions();
                $this->assertNotNull($actual);
                $this->assertTrue(is_array($actual));
                $this->assertEquals($actual, $expect);

                $expect = false;
                $actual = $this->object->getOptions('read');
                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($actual, $expect);

                $expect = false;
                $actual = $this->object->getOptions('save');
                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($actual, $expect);

                $options = ['read' => ['k1' => 'v2']];
                $this->object->setOptions($options);

                $expect = $options;
                $actual = $this->object->getOptions();
                $this->assertNotNull($actual);
                $this->assertTrue(is_array($actual));
                $this->assertEquals($actual, $expect);

                $expect = $options['read'];
                $actual = $this->object->getOptions('read');
                $this->assertNotNull($actual);
                $this->assertTrue(is_array($actual));
                $this->assertEquals($actual, $expect);

                $expect = false;
                $actual = $this->object->getOptions('save');
                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($actual, $expect);
        }

}
