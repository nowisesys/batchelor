
    ***********************************************
        GETTING STARTED
    ***********************************************

This document describes how to integrate your application with batchelor. It's 
assumed that you have completed the simple steps in INSTALL and have batchelor
up and runnig (accessable thru a browser).

At this point you should have the core batch queue working, but it won't handle
any real work until task processors defining your business logic has been added.

** ADDING SOURCE NAMESPACE:

    Open composer.json and add a namespace mapping for source directory. Feel 
    free to use any namespace you like:

        {
            "name": "mycomp/jobqueue",
                ...
            "autoload": {
                "psr-0": {
                    "Application\\": "source"
                }
            }
        }
    
    The source sircetory is going to contain classes you create that defines the 
    tasks that builds up your application. If you decide to use batchelor as a
    generic web application also, then this is the place to add business logic
    that supports your views.

** CREATING TASKS:

    To keep things simple we are going to create a simple task that don't really
    perform any useful job but demonstrate running an extern command and capture
    output to task log.

    Extending this example to perform some real work like encoding video using
    transcode should be straight forward.

    Create a file source/Application/Task/SystemTimeTask.php and add this code 
    as its class definition:

        namespace Application\Task;

        use Batchelor\Queue\Task;
        use Batchelor\Queue\Task\Callback;
        use Batchelor\Storage\Directory;
        use Batchelor\WebService\Types\JobData;

        class SystemTime implements Task
        {
            public function initialize()
            {
                    // No initialize required
            }

            public function prepare(Directory $workdir, JobData $data)
            {
                    // No transformation required.
            }

            public function execute(Directory $workdir, Directory $result, Callback $response)
            {
                    $response->getLogger()->info(system("date"));
            }

            public function finished()
            {
                    // No cleanup required
            }
        }

    An adapter class exists that provides dummy implementation and keeps the data
    passed to prepare(). Using this class saves some typing, leaving only execute()
    to be implemented:

        namespace Application\Task;

        use Batchelor\Queue\Task;
        use Batchelor\Queue\Task\Adapter as TaskAdapter;
        use Batchelor\Queue\Task\Callback;
        use Batchelor\Storage\Directory;

        class SystemTime extends TaskAdapter
        {
            public function execute(Directory $workdir, Directory $result, Callback $response)
            {
                    $response->getLogger()->info(system("date"));
            }
        }

    The namespace Batchelor\Queue\Task\Execute contains a lot of useful classes 
    intended to help with running more complex commands, i.e. interactive commands
    that requires input. Code examples can be found in the public/examples/task
    directory.

    When execute() is called, some useful objects are passed: The work and result
    directory. Store the result from your batch job in result directory to make it
    available for download.

    Use response to communicate task status back to the task processor/scheduler,
    i.e. if job has crashed fatal or finsihed with warnings.

** REGISTER TASKS:

    To make your task available as a processor for incoming jobs it need to be 
    registered with the batch job processor. It could be done in a number of ways,
    but the simpliest is to static define it system services.

    Open config/services.inc and find the processor entry:

        use Batchelor\System\Service;
                ...
        return [
                ...
            'processor'   => new Service(Service\Processor::class)
                ...
        ];

    Change its standard service wrappper to an closure returning the task service
    with our system time task as default handler:

        use Application\Task\SystemTime;
        use Batchelor\Queue\Task\Service as TaskService;
        use Batchelor\System\Service;

        return [
                ...
            'processor'   => function($name) {
                    $processor = new TaskService();
                    $processor->setDefault(new SystemTime());
                    return $processor;
            }
                ...
        ];

    This way of handling it comes at zero cost. Unless the processor system service
    is actually used, no call (and instantiation) will be done.

    You should now have a task ready to be called as a web service to process your
    indata. Please take some time to experiment with it.

** RUNNING JOB PROCESSOR:

    To actually procesor incoming jobs you need to start the job processor inside 
    the utils directory. 

        bash$> ./utils/processor.sh
    
    By default it forks into background as a true daemon process, but can be run 
    in foreground for debugging:

        bash$> ./utils/processor.sh -k -d
    
    The schedule command can be used to monitor the batch queue for pending, running
    and finished jobs:

        bash$> ./utils/scheduler.sh -lA

** CUSTOMIZE:

    Modify core settings in config/defaults.app and config/defaults.site. User 
    interface are found under the public directory and these are the files that
    you should modify to for example change the queue appearance.

    The standard.ui and welcome.ui file inside the template directory defines
    the page layout. Create your own theme by copy the batchelor directory and
    change theme setting in config/defaults.site.

** ENTERPRISE:

    The default is to run a single queue on localhost. For larger installations
    it's possible to define one or more remote queues handling job processing
    yielding an distributed batch queue.

// Anders LÃ¶vgren, 2018-10-20
