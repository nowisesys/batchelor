<?php

namespace Batchelor\Queue\Task\Execute;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-09-21 at 16:19:53.
 */
class ProcessTest extends \PHPUnit_Framework_TestCase
{

        /**
         * @var Process
         */
        protected $object;

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                $this->object = (new Spawner(new class extends Runnable implements Selectable {

                            public function getCommand(): string
                            {
                                    return "ls -l /tmp";
                            }
                    }
                    ))->open();
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                
        }

        /**
         * @covers Batchelor\Queue\Task\Execute\Process::signal
         */
        public function testSignal()
        {
                $actual = $this->object->signal(15);

                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertTrue($actual);
        }

        /**
         * @covers Batchelor\Queue\Task\Execute\Process::suspend
         */
        public function testSuspend()
        {
                $actual = $this->object->suspend();

                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertTrue($actual);

                $this->object->resume();        // Must resume before return from test
        }

        /**
         * @covers Batchelor\Queue\Task\Execute\Process::resume
         */
        public function testResume()
        {
                $actual = $this->object->resume();

                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertTrue($actual);
        }

        /**
         * @covers Batchelor\Queue\Task\Execute\Process::terminate
         */
        public function testTerminate()
        {
                $actual = $this->object->terminate();

                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertTrue($actual);
        }

        /**
         * @covers Batchelor\Queue\Task\Execute\Process::getStreams
         */
        public function testGetStreams()
        {
                $actual = $this->object->getStreams();

                $this->assertNotNull($actual);
                $this->assertTrue(is_array($actual));
                $this->assertTrue(count($actual) == 3);

                $this->assertTrue(is_resource($actual[0]));
                $this->assertTrue(get_resource_type($actual[0]) == "stream");

                $this->assertTrue(is_resource($actual[1]));
                $this->assertTrue(get_resource_type($actual[1]) == "stream");

                $this->assertTrue(is_resource($actual[2]));
                $this->assertTrue(get_resource_type($actual[2]) == "stream");
        }

        /**
         * @covers Batchelor\Queue\Task\Execute\Process::getStream
         */
        public function testGetStream()
        {
                $actual = $this->object->getStream(1);

                $this->assertNotNull($actual);
                $this->assertTrue(is_resource($actual));
                $this->assertTrue(get_resource_type($actual) == "stream");
        }

        /**
         * @covers Batchelor\Queue\Task\Execute\Worker::getExitCode
         */
        public function testGetExitCode()
        {
                $expect = -1;
                $actual = $this->object->getExitCode();

                $this->assertNotNull($actual);
                $this->assertTrue(is_int($actual));
                $this->assertEquals($expect, $actual);

                $this->object->close();

                $expect = 0;
                $actual = $this->object->getExitCode();

                $this->assertNotNull($actual);
                $this->assertTrue(is_int($actual));
                $this->assertEquals($expect, $actual);
        }

        /**
         * @covers Batchelor\Queue\Task\Execute\Worker::getStatus
         */
        public function testGetStatus()
        {
                $actual = $this->object->getStatus();
                $this->assertNotNull($actual);
                $this->assertTrue(is_object($actual));
                $this->assertTrue($actual instanceof Status);
                $this->assertTrue(is_int($actual->pid));
                $this->assertTrue($actual->running);
                $this->assertFalse($actual->signaled);
                $this->assertFalse($actual->stopped);
                $this->assertTrue($actual->stopsig == 0);
                $this->assertTrue($actual->termsig == 0);
                $this->assertTrue($actual->exitcode == -1);

                print_r($actual);

                $this->object->close();
                $actual = $this->object->getStatus();
                $this->assertNotNull($actual);
                $this->assertTrue(is_object($actual));
                $this->assertTrue($actual instanceof Status);
                $this->assertTrue(is_null($actual->pid));
        }

        /**
         * @covers Batchelor\Queue\Task\Execute\Process::isReadable
         */
        public function testIsReadable()
        {
                $actual = $this->object->isReadable(1);
                $this->assertNotNull($actual);
                $this->assertTrue($actual);
        }

        /**
         * @covers Batchelor\Queue\Task\Execute\Process::close
         */
        public function testClose()
        {
                $this->object->close();         // Test not throwing
        }

}
