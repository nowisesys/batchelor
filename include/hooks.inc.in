<?php

// -------------------------------------------------------------------------------
//  Copyright (C) 2007 Anders Lövgren
//
//  This program is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
// -------------------------------------------------------------------------------

// 
// This file contains functions that you can use to hook in into the script
// execution at various steps to perform tasks as indata validation.
// 
// Copy this file to include/hooks.inc, uncomment thoose functions related to the
// task you like to affect.
// 

// 
// This function gets called prior to a job being added to the job queue. This 
// allows submitted data and files (in $file) to be validated and rejected if
// its invalid. This function should return true if the file should be accepted. 
// 
// If the file should be rejected, then put_error() with an string describing 
// the cause and return false. Call put_warning() and return true to tell that 
// the file was accepted but with warnings. If put_error() or put_warning() is
// called, then the last message will be showed below the submit form.
// 
// By passing the file argument by reference its possible to rename the indata
// file depending on its content.
// 
// See hooks.inc.ex-multijob for an example on how to enqueue multiple jobs
// from an single submit using this function.
// 
// function pre_enqueue_hook(&$file, $jobdir, &$handled, &$jobs)
// {
//     if(function_exists("params_proc_hook")) {
//         params_proc_hook($jobdir);
//     }
//     return true;
// }

// 
// This function gets called after the data has been enqueued. The $file
// argument is the input data and $jobdir is the per job directory.
// 
// function post_enqueue_hook($file, $jobdir)
// {
// }

// 
// This function gets called during collection of statistics data. The data is
// later saved to the directory structure under cache/stat. The hostid argument
// is either "all" or a unique ID of submitter. The jobdir is the directory
// to harvest statistics from. The year, month, day and hour is the time when
// this job got queued (submitted).
// 
// function collect_data_hook($hostid, &$data, $jobdir, $year, $month, $day, $hour)
// {
//     // 
//     // Example of saving total and per year data in the private section 'mysect':
//     // 
//     $data[$hostid]['mysect']['key'] = // something... 
//     $data[$hostid][$year]['mysect']['key'] = // something... 
// }

// 
// This function gets called to generate graphics from the data collected
// in call to collect_data_hook(). The graphdir argument is the directory
// where the image should be saved. The datetime is an timestamp suitable for
// printing dates on the image. The type is either "total", "yearly", "monthly",
// or "daily" and tells the function what kind of statistics the date argument
// contains.
// 
// function graph_data_hook($graphdir, $hostid, $options, $datetime, $data, $type)
// {
// }

// 
// This function gets called from statistics.php to display the data collected
// by collect_data_hook() and to print the graphics generated by graph_data_hook().
// The $subsect argument is either "root", "year", "month" or "day" and is a
// hint.
// 
// function show_data_hook($data, $statdir, $subsect)
// {
// }

// 
// This function gets called to print context help.
// 
// function context_help_hook($what)
// {
//     // 
//     // Output system default help:
//     // 
//     context_help_system($what);
//    
//     switch($what) {
//      case "submit":
// 	print "<p>Extra info about submit</p>\n";
// 	break;
//      case "queue":
// 	print "<p>Extra info about queue viewer</p>\n";
// 	break;
//      case "stats":
// 	print "<p>Extra info about statistics</p>\n";
// 	break;
//     }
// }

// 
// Use this function to override how result gets presented by details.php.
// 
// function show_result_hook($started, $finished, &$stdout, &$stderr)
// { 
// }

// 
// Use this function to override how indata gets presented by details.php.
// The indata parameter is the complete path to uploaded data (indata).
// 
// function show_indata_hook($indata)
// {
// }

// 
// This function can be used to add extra request parameters to the submit 
// form. It should print HTML defining extra checkboxes or droplists to be
// included in the submit form.
// 
// function params_form_hook()
// {
//     print "Name: <input type=\"text\" name=\"name\">\n";
// }

// 
// This is an example on how to handle the extra request parameters sent to
// the server by params_form_hook(). This function could be called from i.e.
// pre_enqueue_hook() or post_enqueue_hook to save the request parameters 
// for later use by utils/script.inc when running the queued job.
// 
// function params_proc_hook($jobdir)
// {
//     // 
//     // Simple save all request parameters to a file:
//     // 
//     $fs = fopen(sprintf("%s/params", $jobdir));
//     if($fs) {
//         foreach($_REQUEST as $key => $val) {
//             fprintf($fs, "%s = %s\n", $key, $val);
//         }
//     }
// }

?>
